// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: club_svc_public.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClubServicePublic_GetClubProfile_FullMethodName             = "/proto.ClubServicePublic/GetClubProfile"
	ClubServicePublic_GetPlayerProfileByClub_FullMethodName     = "/proto.ClubServicePublic/GetPlayerProfileByClub"
	ClubServicePublic_GetClubProfileListBySeaSon_FullMethodName = "/proto.ClubServicePublic/GetClubProfileListBySeaSon"
	ClubServicePublic_GetPlayerProfile_FullMethodName           = "/proto.ClubServicePublic/GetPlayerProfile"
	ClubServicePublic_GetAllCoachProfile_FullMethodName         = "/proto.ClubServicePublic/GetAllCoachProfile"
)

// ClubServicePublicClient is the client API for ClubServicePublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServicePublicClient interface {
	// Get a club's information
	GetClubProfile(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error)
	// Get a player's information by club
	GetPlayerProfileByClub(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*PlayerProfileListResponse, error)
	GetClubProfileListBySeaSon(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*ClubProfileListResponse, error)
	GetPlayerProfile(ctx context.Context, in *PLayerRequest, opts ...grpc.CallOption) (*PLayerProfileResponse, error)
	GetAllCoachProfile(ctx context.Context, in *CoachClubRequest, opts ...grpc.CallOption) (*CoachProfileResponseList, error)
}

type clubServicePublicClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServicePublicClient(cc grpc.ClientConnInterface) ClubServicePublicClient {
	return &clubServicePublicClient{cc}
}

func (c *clubServicePublicClient) GetClubProfile(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error) {
	out := new(ClubProfileResponse)
	err := c.cc.Invoke(ctx, ClubServicePublic_GetClubProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServicePublicClient) GetPlayerProfileByClub(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*PlayerProfileListResponse, error) {
	out := new(PlayerProfileListResponse)
	err := c.cc.Invoke(ctx, ClubServicePublic_GetPlayerProfileByClub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServicePublicClient) GetClubProfileListBySeaSon(ctx context.Context, in *ClubProfileIdRequest, opts ...grpc.CallOption) (*ClubProfileListResponse, error) {
	out := new(ClubProfileListResponse)
	err := c.cc.Invoke(ctx, ClubServicePublic_GetClubProfileListBySeaSon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServicePublicClient) GetPlayerProfile(ctx context.Context, in *PLayerRequest, opts ...grpc.CallOption) (*PLayerProfileResponse, error) {
	out := new(PLayerProfileResponse)
	err := c.cc.Invoke(ctx, ClubServicePublic_GetPlayerProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServicePublicClient) GetAllCoachProfile(ctx context.Context, in *CoachClubRequest, opts ...grpc.CallOption) (*CoachProfileResponseList, error) {
	out := new(CoachProfileResponseList)
	err := c.cc.Invoke(ctx, ClubServicePublic_GetAllCoachProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServicePublicServer is the server API for ClubServicePublic service.
// All implementations should embed UnimplementedClubServicePublicServer
// for forward compatibility
type ClubServicePublicServer interface {
	// Get a club's information
	GetClubProfile(context.Context, *ClubProfileIdRequest) (*ClubProfileResponse, error)
	// Get a player's information by club
	GetPlayerProfileByClub(context.Context, *ClubProfileIdRequest) (*PlayerProfileListResponse, error)
	GetClubProfileListBySeaSon(context.Context, *ClubProfileIdRequest) (*ClubProfileListResponse, error)
	GetPlayerProfile(context.Context, *PLayerRequest) (*PLayerProfileResponse, error)
	GetAllCoachProfile(context.Context, *CoachClubRequest) (*CoachProfileResponseList, error)
}

// UnimplementedClubServicePublicServer should be embedded to have forward compatible implementations.
type UnimplementedClubServicePublicServer struct {
}

func (UnimplementedClubServicePublicServer) GetClubProfile(context.Context, *ClubProfileIdRequest) (*ClubProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubProfile not implemented")
}
func (UnimplementedClubServicePublicServer) GetPlayerProfileByClub(context.Context, *ClubProfileIdRequest) (*PlayerProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerProfileByClub not implemented")
}
func (UnimplementedClubServicePublicServer) GetClubProfileListBySeaSon(context.Context, *ClubProfileIdRequest) (*ClubProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubProfileListBySeaSon not implemented")
}
func (UnimplementedClubServicePublicServer) GetPlayerProfile(context.Context, *PLayerRequest) (*PLayerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerProfile not implemented")
}
func (UnimplementedClubServicePublicServer) GetAllCoachProfile(context.Context, *CoachClubRequest) (*CoachProfileResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCoachProfile not implemented")
}

// UnsafeClubServicePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServicePublicServer will
// result in compilation errors.
type UnsafeClubServicePublicServer interface {
	mustEmbedUnimplementedClubServicePublicServer()
}

func RegisterClubServicePublicServer(s grpc.ServiceRegistrar, srv ClubServicePublicServer) {
	s.RegisterService(&ClubServicePublic_ServiceDesc, srv)
}

func _ClubServicePublic_GetClubProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServicePublicServer).GetClubProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServicePublic_GetClubProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServicePublicServer).GetClubProfile(ctx, req.(*ClubProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServicePublic_GetPlayerProfileByClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServicePublicServer).GetPlayerProfileByClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServicePublic_GetPlayerProfileByClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServicePublicServer).GetPlayerProfileByClub(ctx, req.(*ClubProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServicePublic_GetClubProfileListBySeaSon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServicePublicServer).GetClubProfileListBySeaSon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServicePublic_GetClubProfileListBySeaSon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServicePublicServer).GetClubProfileListBySeaSon(ctx, req.(*ClubProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServicePublic_GetPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServicePublicServer).GetPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServicePublic_GetPlayerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServicePublicServer).GetPlayerProfile(ctx, req.(*PLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubServicePublic_GetAllCoachProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServicePublicServer).GetAllCoachProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubServicePublic_GetAllCoachProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServicePublicServer).GetAllCoachProfile(ctx, req.(*CoachClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubServicePublic_ServiceDesc is the grpc.ServiceDesc for ClubServicePublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubServicePublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClubServicePublic",
	HandlerType: (*ClubServicePublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClubProfile",
			Handler:    _ClubServicePublic_GetClubProfile_Handler,
		},
		{
			MethodName: "GetPlayerProfileByClub",
			Handler:    _ClubServicePublic_GetPlayerProfileByClub_Handler,
		},
		{
			MethodName: "GetClubProfileListBySeaSon",
			Handler:    _ClubServicePublic_GetClubProfileListBySeaSon_Handler,
		},
		{
			MethodName: "GetPlayerProfile",
			Handler:    _ClubServicePublic_GetPlayerProfile_Handler,
		},
		{
			MethodName: "GetAllCoachProfile",
			Handler:    _ClubServicePublic_GetAllCoachProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club_svc_public.proto",
}
