// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: summary.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Summary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Summary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Summary with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SummaryMultiError, or nil if none found.
func (m *Summary) ValidateAll() error {
	return m.validate(true)
}

func (m *Summary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClubId

	// no validation rules for ClubName

	// no validation rules for MatchPlayed

	// no validation rules for MatchWon

	// no validation rules for MatchLost

	// no validation rules for MatchDraw

	// no validation rules for GoalScored

	// no validation rules for GoalConceded

	// no validation rules for GoalDifference

	// no validation rules for Points

	// no validation rules for YellowCard

	// no validation rules for RedCard

	// no validation rules for Rank

	// no validation rules for SeaSon

	if len(errors) > 0 {
		return SummaryMultiError(errors)
	}

	return nil
}

// SummaryMultiError is an error wrapping multiple validation errors returned
// by Summary.ValidateAll() if the designated constraints aren't met.
type SummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SummaryMultiError) AllErrors() []error { return m }

// SummaryValidationError is the validation error returned by Summary.Validate
// if the designated constraints aren't met.
type SummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SummaryValidationError) ErrorName() string { return "SummaryValidationError" }

// Error satisfies the builtin error interface
func (e SummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SummaryValidationError{}

// Validate checks the field values on CreateSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSummaryRequestMultiError, or nil if none found.
func (m *CreateSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSummary() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSummaryRequestValidationError{
						field:  fmt.Sprintf("Summary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSummaryRequestValidationError{
						field:  fmt.Sprintf("Summary[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSummaryRequestValidationError{
					field:  fmt.Sprintf("Summary[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SeaSon

	if len(errors) > 0 {
		return CreateSummaryRequestMultiError(errors)
	}

	return nil
}

// CreateSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSummaryRequestMultiError) AllErrors() []error { return m }

// CreateSummaryRequestValidationError is the validation error returned by
// CreateSummaryRequest.Validate if the designated constraints aren't met.
type CreateSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSummaryRequestValidationError) ErrorName() string {
	return "CreateSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSummaryRequestValidationError{}

// Validate checks the field values on CreateSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSummaryResponseMultiError, or nil if none found.
func (m *CreateSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateSummaryResponseMultiError(errors)
	}

	return nil
}

// CreateSummaryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSummaryResponseMultiError) AllErrors() []error { return m }

// CreateSummaryResponseValidationError is the validation error returned by
// CreateSummaryResponse.Validate if the designated constraints aren't met.
type CreateSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSummaryResponseValidationError) ErrorName() string {
	return "CreateSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSummaryResponseValidationError{}

// Validate checks the field values on GetSummaryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryRequestMultiError, or nil if none found.
func (m *GetSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SeaSon

	if len(errors) > 0 {
		return GetSummaryRequestMultiError(errors)
	}

	return nil
}

// GetSummaryRequestMultiError is an error wrapping multiple validation errors
// returned by GetSummaryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryRequestMultiError) AllErrors() []error { return m }

// GetSummaryRequestValidationError is the validation error returned by
// GetSummaryRequest.Validate if the designated constraints aren't met.
type GetSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryRequestValidationError) ErrorName() string {
	return "GetSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryRequestValidationError{}

// Validate checks the field values on SummaryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SummaryResponseMultiError, or nil if none found.
func (m *SummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClubId

	// no validation rules for ClubName

	// no validation rules for MatchPlayed

	// no validation rules for MatchWon

	// no validation rules for MatchLost

	// no validation rules for MatchDraw

	// no validation rules for GoalScored

	// no validation rules for GoalConceded

	// no validation rules for GoalDifference

	// no validation rules for Points

	// no validation rules for YellowCard

	// no validation rules for RedCard

	// no validation rules for Rank

	// no validation rules for SeaSon

	// no validation rules for LogoLink

	// no validation rules for Shorthand

	if len(errors) > 0 {
		return SummaryResponseMultiError(errors)
	}

	return nil
}

// SummaryResponseMultiError is an error wrapping multiple validation errors
// returned by SummaryResponse.ValidateAll() if the designated constraints
// aren't met.
type SummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SummaryResponseMultiError) AllErrors() []error { return m }

// SummaryResponseValidationError is the validation error returned by
// SummaryResponse.Validate if the designated constraints aren't met.
type SummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SummaryResponseValidationError) ErrorName() string { return "SummaryResponseValidationError" }

// Error satisfies the builtin error interface
func (e SummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SummaryResponseValidationError{}

// Validate checks the field values on SummaryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SummaryListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SummaryListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SummaryListResponseMultiError, or nil if none found.
func (m *SummaryListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SummaryListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SummaryListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SummaryListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SummaryListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return SummaryListResponseMultiError(errors)
	}

	return nil
}

// SummaryListResponseMultiError is an error wrapping multiple validation
// errors returned by SummaryListResponse.ValidateAll() if the designated
// constraints aren't met.
type SummaryListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SummaryListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SummaryListResponseMultiError) AllErrors() []error { return m }

// SummaryListResponseValidationError is the validation error returned by
// SummaryListResponse.Validate if the designated constraints aren't met.
type SummaryListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SummaryListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SummaryListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SummaryListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SummaryListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SummaryListResponseValidationError) ErrorName() string {
	return "SummaryListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SummaryListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSummaryListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SummaryListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SummaryListResponseValidationError{}

// Validate checks the field values on CreateSeasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSeasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSeasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSeasonRequestMultiError, or nil if none found.
func (m *CreateSeasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSeasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SeaSon

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateSeasonRequestMultiError(errors)
	}

	return nil
}

// CreateSeasonRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSeasonRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSeasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSeasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSeasonRequestMultiError) AllErrors() []error { return m }

// CreateSeasonRequestValidationError is the validation error returned by
// CreateSeasonRequest.Validate if the designated constraints aren't met.
type CreateSeasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSeasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSeasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSeasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSeasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSeasonRequestValidationError) ErrorName() string {
	return "CreateSeasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSeasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSeasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSeasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSeasonRequestValidationError{}

// Validate checks the field values on CreateLeagueRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLeagueRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLeagueRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLeagueRuleRequestMultiError, or nil if none found.
func (m *CreateLeagueRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLeagueRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return CreateLeagueRuleRequestMultiError(errors)
	}

	return nil
}

// CreateLeagueRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLeagueRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLeagueRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLeagueRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLeagueRuleRequestMultiError) AllErrors() []error { return m }

// CreateLeagueRuleRequestValidationError is the validation error returned by
// CreateLeagueRuleRequest.Validate if the designated constraints aren't met.
type CreateLeagueRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLeagueRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLeagueRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLeagueRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLeagueRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLeagueRuleRequestValidationError) ErrorName() string {
	return "CreateLeagueRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLeagueRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLeagueRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLeagueRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLeagueRuleRequestValidationError{}

// Validate checks the field values on CreateLeagueRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLeagueRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLeagueRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLeagueRuleResponseMultiError, or nil if none found.
func (m *CreateLeagueRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLeagueRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateLeagueRuleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateLeagueRuleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateLeagueRuleResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateLeagueRuleResponseMultiError(errors)
	}

	return nil
}

// CreateLeagueRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLeagueRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLeagueRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLeagueRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLeagueRuleResponseMultiError) AllErrors() []error { return m }

// CreateLeagueRuleResponseValidationError is the validation error returned by
// CreateLeagueRuleResponse.Validate if the designated constraints aren't met.
type CreateLeagueRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLeagueRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLeagueRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLeagueRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLeagueRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLeagueRuleResponseValidationError) ErrorName() string {
	return "CreateLeagueRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLeagueRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLeagueRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLeagueRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLeagueRuleResponseValidationError{}

// Validate checks the field values on LeagueRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeagueRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeagueRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeagueRuleResponseMultiError, or nil if none found.
func (m *LeagueRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeagueRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return LeagueRuleResponseMultiError(errors)
	}

	return nil
}

// LeagueRuleResponseMultiError is an error wrapping multiple validation errors
// returned by LeagueRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type LeagueRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeagueRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeagueRuleResponseMultiError) AllErrors() []error { return m }

// LeagueRuleResponseValidationError is the validation error returned by
// LeagueRuleResponse.Validate if the designated constraints aren't met.
type LeagueRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeagueRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeagueRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeagueRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeagueRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeagueRuleResponseValidationError) ErrorName() string {
	return "LeagueRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeagueRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeagueRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeagueRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeagueRuleResponseValidationError{}

// Validate checks the field values on UpdateLeagueRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeagueRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeagueRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLeagueRuleRequestMultiError, or nil if none found.
func (m *UpdateLeagueRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeagueRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Key

	if len(errors) > 0 {
		return UpdateLeagueRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateLeagueRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLeagueRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLeagueRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeagueRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeagueRuleRequestMultiError) AllErrors() []error { return m }

// UpdateLeagueRuleRequestValidationError is the validation error returned by
// UpdateLeagueRuleRequest.Validate if the designated constraints aren't met.
type UpdateLeagueRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeagueRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeagueRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeagueRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeagueRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeagueRuleRequestValidationError) ErrorName() string {
	return "UpdateLeagueRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeagueRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeagueRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeagueRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeagueRuleRequestValidationError{}
