// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: club_svc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClubService_GetClubProfile_FullMethodName      = "/proto.ClubService/GetClubProfile"
	ClubService_CreateClub_FullMethodName          = "/proto.ClubService/CreateClub"
	ClubService_UpdateClub_FullMethodName          = "/proto.ClubService/UpdateClub"
	ClubService_GetAllClubProfile_FullMethodName   = "/proto.ClubService/GetAllClubProfile"
	ClubService_CreatePlayer_FullMethodName        = "/proto.ClubService/CreatePlayer"
	ClubService_UpdatePlayer_FullMethodName        = "/proto.ClubService/UpdatePlayer"
	ClubService_DeletePlayer_FullMethodName        = "/proto.ClubService/DeletePlayer"
	ClubService_GetAllPlayerProfile_FullMethodName = "/proto.ClubService/GetAllPlayerProfile"
	ClubService_CreateCoach_FullMethodName         = "/proto.ClubService/CreateCoach"
	ClubService_DeleteCoach_FullMethodName         = "/proto.ClubService/DeleteCoach"
	ClubService_UpdateCoach_FullMethodName         = "/proto.ClubService/UpdateCoach"
	ClubService_GetCoachProfile_FullMethodName     = "/proto.ClubService/GetCoachProfile"
	ClubService_GetListCoachProfile_FullMethodName = "/proto.ClubService/GetListCoachProfile"
	ClubService_CreateStadium_FullMethodName       = "/proto.ClubService/CreateStadium"
)

// ClubServiceClient is the client API for ClubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServiceClient interface {
	// Get a club's information
	GetClubProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error)
	CreateClub(ctx context.Context, in *ClubProfileRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error)
	UpdateClub(ctx context.Context, in *ClubProfileRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error)
	GetAllClubProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClubProfileListResponse, error)
	CreatePlayer(ctx context.Context, in *PLayerProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	UpdatePlayer(ctx context.Context, in *PLayerProfileRequest, opts ...grpc.CallOption) (*PLayerProfileResponse, error)
	DeletePlayer(ctx context.Context, in *PLayerRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	GetAllPlayerProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PlayerProfileListResponse, error)
	CreateCoach(ctx context.Context, in *CoachProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	DeleteCoach(ctx context.Context, in *CoachRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	UpdateCoach(ctx context.Context, in *CoachProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	GetCoachProfile(ctx context.Context, in *CoachRequest, opts ...grpc.CallOption) (*CoachProfileResponse, error)
	GetListCoachProfile(ctx context.Context, in *CoachProfileListRequest, opts ...grpc.CallOption) (*CoachProfileListResponse, error)
	CreateStadium(ctx context.Context, in *StadiumProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
}

type clubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServiceClient(cc grpc.ClientConnInterface) ClubServiceClient {
	return &clubServiceClient{cc}
}

func (c *clubServiceClient) GetClubProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error) {
	out := new(ClubProfileResponse)
	err := c.cc.Invoke(ctx, ClubService_GetClubProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CreateClub(ctx context.Context, in *ClubProfileRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error) {
	out := new(ClubProfileResponse)
	err := c.cc.Invoke(ctx, ClubService_CreateClub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdateClub(ctx context.Context, in *ClubProfileRequest, opts ...grpc.CallOption) (*ClubProfileResponse, error) {
	out := new(ClubProfileResponse)
	err := c.cc.Invoke(ctx, ClubService_UpdateClub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetAllClubProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClubProfileListResponse, error) {
	out := new(ClubProfileListResponse)
	err := c.cc.Invoke(ctx, ClubService_GetAllClubProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CreatePlayer(ctx context.Context, in *PLayerProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_CreatePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdatePlayer(ctx context.Context, in *PLayerProfileRequest, opts ...grpc.CallOption) (*PLayerProfileResponse, error) {
	out := new(PLayerProfileResponse)
	err := c.cc.Invoke(ctx, ClubService_UpdatePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) DeletePlayer(ctx context.Context, in *PLayerRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_DeletePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetAllPlayerProfile(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PlayerProfileListResponse, error) {
	out := new(PlayerProfileListResponse)
	err := c.cc.Invoke(ctx, ClubService_GetAllPlayerProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CreateCoach(ctx context.Context, in *CoachProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_CreateCoach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) DeleteCoach(ctx context.Context, in *CoachRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_DeleteCoach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdateCoach(ctx context.Context, in *CoachProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_UpdateCoach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetCoachProfile(ctx context.Context, in *CoachRequest, opts ...grpc.CallOption) (*CoachProfileResponse, error) {
	out := new(CoachProfileResponse)
	err := c.cc.Invoke(ctx, ClubService_GetCoachProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) GetListCoachProfile(ctx context.Context, in *CoachProfileListRequest, opts ...grpc.CallOption) (*CoachProfileListResponse, error) {
	out := new(CoachProfileListResponse)
	err := c.cc.Invoke(ctx, ClubService_GetListCoachProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CreateStadium(ctx context.Context, in *StadiumProfileRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, ClubService_CreateStadium_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServiceServer is the server API for ClubService service.
// All implementations should embed UnimplementedClubServiceServer
// for forward compatibility
type ClubServiceServer interface {
	// Get a club's information
	GetClubProfile(context.Context, *EmptyRequest) (*ClubProfileResponse, error)
	CreateClub(context.Context, *ClubProfileRequest) (*ClubProfileResponse, error)
	UpdateClub(context.Context, *ClubProfileRequest) (*ClubProfileResponse, error)
	GetAllClubProfile(context.Context, *EmptyRequest) (*ClubProfileListResponse, error)
	CreatePlayer(context.Context, *PLayerProfileRequest) (*SuccessMessageResponse, error)
	UpdatePlayer(context.Context, *PLayerProfileRequest) (*PLayerProfileResponse, error)
	DeletePlayer(context.Context, *PLayerRequest) (*SuccessMessageResponse, error)
	GetAllPlayerProfile(context.Context, *EmptyRequest) (*PlayerProfileListResponse, error)
	CreateCoach(context.Context, *CoachProfileRequest) (*SuccessMessageResponse, error)
	DeleteCoach(context.Context, *CoachRequest) (*SuccessMessageResponse, error)
	UpdateCoach(context.Context, *CoachProfileRequest) (*SuccessMessageResponse, error)
	GetCoachProfile(context.Context, *CoachRequest) (*CoachProfileResponse, error)
	GetListCoachProfile(context.Context, *CoachProfileListRequest) (*CoachProfileListResponse, error)
	CreateStadium(context.Context, *StadiumProfileRequest) (*SuccessMessageResponse, error)
}

// UnimplementedClubServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClubServiceServer struct {
}

func (UnimplementedClubServiceServer) GetClubProfile(context.Context, *EmptyRequest) (*ClubProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubProfile not implemented")
}
func (UnimplementedClubServiceServer) CreateClub(context.Context, *ClubProfileRequest) (*ClubProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClub not implemented")
}
func (UnimplementedClubServiceServer) UpdateClub(context.Context, *ClubProfileRequest) (*ClubProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClub not implemented")
}
func (UnimplementedClubServiceServer) GetAllClubProfile(context.Context, *EmptyRequest) (*ClubProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClubProfile not implemented")
}
func (UnimplementedClubServiceServer) CreatePlayer(context.Context, *PLayerProfileRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedClubServiceServer) UpdatePlayer(context.Context, *PLayerProfileRequest) (*PLayerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}
func (UnimplementedClubServiceServer) DeletePlayer(context.Context, *PLayerRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayer not implemented")
}
func (UnimplementedClubServiceServer) GetAllPlayerProfile(context.Context, *EmptyRequest) (*PlayerProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPlayerProfile not implemented")
}
func (UnimplementedClubServiceServer) CreateCoach(context.Context, *CoachProfileRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoach not implemented")
}
func (UnimplementedClubServiceServer) DeleteCoach(context.Context, *CoachRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoach not implemented")
}
func (UnimplementedClubServiceServer) UpdateCoach(context.Context, *CoachProfileRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoach not implemented")
}
func (UnimplementedClubServiceServer) GetCoachProfile(context.Context, *CoachRequest) (*CoachProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoachProfile not implemented")
}
func (UnimplementedClubServiceServer) GetListCoachProfile(context.Context, *CoachProfileListRequest) (*CoachProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCoachProfile not implemented")
}
func (UnimplementedClubServiceServer) CreateStadium(context.Context, *StadiumProfileRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStadium not implemented")
}

// UnsafeClubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServiceServer will
// result in compilation errors.
type UnsafeClubServiceServer interface {
	mustEmbedUnimplementedClubServiceServer()
}

func RegisterClubServiceServer(s grpc.ServiceRegistrar, srv ClubServiceServer) {
	s.RegisterService(&ClubService_ServiceDesc, srv)
}

func _ClubService_GetClubProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetClubProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetClubProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetClubProfile(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_CreateClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CreateClub(ctx, req.(*ClubProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClubProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_UpdateClub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdateClub(ctx, req.(*ClubProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetAllClubProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetAllClubProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetAllClubProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetAllClubProfile(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CreatePlayer(ctx, req.(*PLayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLayerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_UpdatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdatePlayer(ctx, req.(*PLayerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_DeletePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).DeletePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_DeletePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).DeletePlayer(ctx, req.(*PLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetAllPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetAllPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetAllPlayerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetAllPlayerProfile(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CreateCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CreateCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_CreateCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CreateCoach(ctx, req.(*CoachProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_DeleteCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).DeleteCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_DeleteCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).DeleteCoach(ctx, req.(*CoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdateCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdateCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_UpdateCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdateCoach(ctx, req.(*CoachProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetCoachProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetCoachProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetCoachProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetCoachProfile(ctx, req.(*CoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_GetListCoachProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoachProfileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).GetListCoachProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_GetListCoachProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).GetListCoachProfile(ctx, req.(*CoachProfileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CreateStadium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StadiumProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CreateStadium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClubService_CreateStadium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CreateStadium(ctx, req.(*StadiumProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubService_ServiceDesc is the grpc.ServiceDesc for ClubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClubService",
	HandlerType: (*ClubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClubProfile",
			Handler:    _ClubService_GetClubProfile_Handler,
		},
		{
			MethodName: "CreateClub",
			Handler:    _ClubService_CreateClub_Handler,
		},
		{
			MethodName: "UpdateClub",
			Handler:    _ClubService_UpdateClub_Handler,
		},
		{
			MethodName: "GetAllClubProfile",
			Handler:    _ClubService_GetAllClubProfile_Handler,
		},
		{
			MethodName: "CreatePlayer",
			Handler:    _ClubService_CreatePlayer_Handler,
		},
		{
			MethodName: "UpdatePlayer",
			Handler:    _ClubService_UpdatePlayer_Handler,
		},
		{
			MethodName: "DeletePlayer",
			Handler:    _ClubService_DeletePlayer_Handler,
		},
		{
			MethodName: "GetAllPlayerProfile",
			Handler:    _ClubService_GetAllPlayerProfile_Handler,
		},
		{
			MethodName: "CreateCoach",
			Handler:    _ClubService_CreateCoach_Handler,
		},
		{
			MethodName: "DeleteCoach",
			Handler:    _ClubService_DeleteCoach_Handler,
		},
		{
			MethodName: "UpdateCoach",
			Handler:    _ClubService_UpdateCoach_Handler,
		},
		{
			MethodName: "GetCoachProfile",
			Handler:    _ClubService_GetCoachProfile_Handler,
		},
		{
			MethodName: "GetListCoachProfile",
			Handler:    _ClubService_GetListCoachProfile_Handler,
		},
		{
			MethodName: "CreateStadium",
			Handler:    _ClubService_CreateStadium_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club_svc.proto",
}
