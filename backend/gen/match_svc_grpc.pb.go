// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: match_svc.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchService_CreateMatchCalendar_FullMethodName   = "/proto.MatchService/CreateMatchCalendar"
	MatchService_UpdateMatchCalendar_FullMethodName   = "/proto.MatchService/UpdateMatchCalendar"
	MatchService_CreateProgressScore_FullMethodName   = "/proto.MatchService/CreateProgressScore"
	MatchService_CreateProgressCard_FullMethodName    = "/proto.MatchService/CreateProgressCard"
	MatchService_CreateMatchResult_FullMethodName     = "/proto.MatchService/CreateMatchResult"
	MatchService_CreateAllMatchResults_FullMethodName = "/proto.MatchService/CreateAllMatchResults"
	MatchService_CreateGoalType_FullMethodName        = "/proto.MatchService/CreateGoalType"
	MatchService_CreateCardType_FullMethodName        = "/proto.MatchService/CreateCardType"
	MatchService_DeleteGoalType_FullMethodName        = "/proto.MatchService/DeleteGoalType"
	MatchService_DeleteCardType_FullMethodName        = "/proto.MatchService/DeleteCardType"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServiceClient interface {
	CreateMatchCalendar(ctx context.Context, in *MatchCalendar, opts ...grpc.CallOption) (*MatchCalendarRequest, error)
	UpdateMatchCalendar(ctx context.Context, in *MatchCalendar, opts ...grpc.CallOption) (*MatchCalendarResponse, error)
	CreateProgressScore(ctx context.Context, in *ProgressScore, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	CreateProgressCard(ctx context.Context, in *ProgressCard, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	CreateMatchResult(ctx context.Context, in *ResultScore, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	CreateAllMatchResults(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	CreateGoalType(ctx context.Context, in *GoalType, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	CreateCardType(ctx context.Context, in *CardType, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	DeleteGoalType(ctx context.Context, in *GoalType, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
	DeleteCardType(ctx context.Context, in *CardType, opts ...grpc.CallOption) (*SuccessMessageResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) CreateMatchCalendar(ctx context.Context, in *MatchCalendar, opts ...grpc.CallOption) (*MatchCalendarRequest, error) {
	out := new(MatchCalendarRequest)
	err := c.cc.Invoke(ctx, MatchService_CreateMatchCalendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) UpdateMatchCalendar(ctx context.Context, in *MatchCalendar, opts ...grpc.CallOption) (*MatchCalendarResponse, error) {
	out := new(MatchCalendarResponse)
	err := c.cc.Invoke(ctx, MatchService_UpdateMatchCalendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateProgressScore(ctx context.Context, in *ProgressScore, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateProgressScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateProgressCard(ctx context.Context, in *ProgressCard, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateProgressCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateMatchResult(ctx context.Context, in *ResultScore, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateMatchResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateAllMatchResults(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateAllMatchResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateGoalType(ctx context.Context, in *GoalType, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateGoalType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateCardType(ctx context.Context, in *CardType, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateCardType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) DeleteGoalType(ctx context.Context, in *GoalType, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_DeleteGoalType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) DeleteCardType(ctx context.Context, in *CardType, opts ...grpc.CallOption) (*SuccessMessageResponse, error) {
	out := new(SuccessMessageResponse)
	err := c.cc.Invoke(ctx, MatchService_DeleteCardType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations should embed UnimplementedMatchServiceServer
// for forward compatibility
type MatchServiceServer interface {
	CreateMatchCalendar(context.Context, *MatchCalendar) (*MatchCalendarRequest, error)
	UpdateMatchCalendar(context.Context, *MatchCalendar) (*MatchCalendarResponse, error)
	CreateProgressScore(context.Context, *ProgressScore) (*SuccessMessageResponse, error)
	CreateProgressCard(context.Context, *ProgressCard) (*SuccessMessageResponse, error)
	CreateMatchResult(context.Context, *ResultScore) (*SuccessMessageResponse, error)
	CreateAllMatchResults(context.Context, *EmptyRequest) (*SuccessMessageResponse, error)
	CreateGoalType(context.Context, *GoalType) (*SuccessMessageResponse, error)
	CreateCardType(context.Context, *CardType) (*SuccessMessageResponse, error)
	DeleteGoalType(context.Context, *GoalType) (*SuccessMessageResponse, error)
	DeleteCardType(context.Context, *CardType) (*SuccessMessageResponse, error)
}

// UnimplementedMatchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (UnimplementedMatchServiceServer) CreateMatchCalendar(context.Context, *MatchCalendar) (*MatchCalendarRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchCalendar not implemented")
}
func (UnimplementedMatchServiceServer) UpdateMatchCalendar(context.Context, *MatchCalendar) (*MatchCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchCalendar not implemented")
}
func (UnimplementedMatchServiceServer) CreateProgressScore(context.Context, *ProgressScore) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgressScore not implemented")
}
func (UnimplementedMatchServiceServer) CreateProgressCard(context.Context, *ProgressCard) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgressCard not implemented")
}
func (UnimplementedMatchServiceServer) CreateMatchResult(context.Context, *ResultScore) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchResult not implemented")
}
func (UnimplementedMatchServiceServer) CreateAllMatchResults(context.Context, *EmptyRequest) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllMatchResults not implemented")
}
func (UnimplementedMatchServiceServer) CreateGoalType(context.Context, *GoalType) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoalType not implemented")
}
func (UnimplementedMatchServiceServer) CreateCardType(context.Context, *CardType) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCardType not implemented")
}
func (UnimplementedMatchServiceServer) DeleteGoalType(context.Context, *GoalType) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoalType not implemented")
}
func (UnimplementedMatchServiceServer) DeleteCardType(context.Context, *CardType) (*SuccessMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardType not implemented")
}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_CreateMatchCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCalendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateMatchCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateMatchCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateMatchCalendar(ctx, req.(*MatchCalendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_UpdateMatchCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCalendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).UpdateMatchCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_UpdateMatchCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).UpdateMatchCalendar(ctx, req.(*MatchCalendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateProgressScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateProgressScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateProgressScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateProgressScore(ctx, req.(*ProgressScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateProgressCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateProgressCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateProgressCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateProgressCard(ctx, req.(*ProgressCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateMatchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateMatchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateMatchResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateMatchResult(ctx, req.(*ResultScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateAllMatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateAllMatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateAllMatchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateAllMatchResults(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateGoalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateGoalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateGoalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateGoalType(ctx, req.(*GoalType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateCardType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateCardType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateCardType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateCardType(ctx, req.(*CardType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_DeleteGoalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).DeleteGoalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_DeleteGoalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).DeleteGoalType(ctx, req.(*GoalType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_DeleteCardType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).DeleteCardType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_DeleteCardType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).DeleteCardType(ctx, req.(*CardType))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMatchCalendar",
			Handler:    _MatchService_CreateMatchCalendar_Handler,
		},
		{
			MethodName: "UpdateMatchCalendar",
			Handler:    _MatchService_UpdateMatchCalendar_Handler,
		},
		{
			MethodName: "CreateProgressScore",
			Handler:    _MatchService_CreateProgressScore_Handler,
		},
		{
			MethodName: "CreateProgressCard",
			Handler:    _MatchService_CreateProgressCard_Handler,
		},
		{
			MethodName: "CreateMatchResult",
			Handler:    _MatchService_CreateMatchResult_Handler,
		},
		{
			MethodName: "CreateAllMatchResults",
			Handler:    _MatchService_CreateAllMatchResults_Handler,
		},
		{
			MethodName: "CreateGoalType",
			Handler:    _MatchService_CreateGoalType_Handler,
		},
		{
			MethodName: "CreateCardType",
			Handler:    _MatchService_CreateCardType_Handler,
		},
		{
			MethodName: "DeleteGoalType",
			Handler:    _MatchService_DeleteGoalType_Handler,
		},
		{
			MethodName: "DeleteCardType",
			Handler:    _MatchService_DeleteCardType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_svc.proto",
}
